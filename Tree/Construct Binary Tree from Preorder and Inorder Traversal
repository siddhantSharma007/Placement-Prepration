class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int n = preorder.length;
        int m = inorder.length;

        HashMap<Integer,Integer> hm = new HashMap<>();
        for(int i = 0; i < n; i++)
            hm.put(inorder[i], i);
        
        return buildTree(preorder, 0, n - 1, inorder, 0, m - 1, hm);
    }
    private TreeNode buildTree(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd, HashMap<Integer,Integer> map){
        if(preStart > preEnd || inStart > inEnd) return null;

        TreeNode root = new TreeNode(preorder[preStart]);

        int inRoot = map.get(root.val);
        int numLeft = inRoot - inStart;

        root.left = buildTree(preorder,preStart+1,preStart + numLeft, inorder, inStart, inRoot - 1, map);
        
        root.right = buildTree(preorder,preStart + numLeft + 1, preEnd, inorder, inRoot + 1, inEnd, map);

        return root;
    }
